
package ws;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "CaretakerWS", targetNamespace = "http://ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CaretakerWS {


    /**
     * 
     * @param timeRefId
     * @param patientId
     * @param matchtot
     * @param dateV
     * @param ctkId
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "setVisit", targetNamespace = "http://ws/", className = "ws.SetVisit")
    @Action(input = "http://ws/CaretakerWS/setVisit")
    public void setVisit(
        @WebParam(name = "ctkId", targetNamespace = "")
        long ctkId,
        @WebParam(name = "patientId", targetNamespace = "")
        long patientId,
        @WebParam(name = "dateV", targetNamespace = "")
        String dateV,
        @WebParam(name = "timeRefId", targetNamespace = "")
        Long timeRefId,
        @WebParam(name = "matchtot", targetNamespace = "")
        int matchtot);

    /**
     * 
     * @return
     *     returns java.util.List<ws.TimeReference>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllCaretakersSchedule", targetNamespace = "http://ws/", className = "ws.GetAllCaretakersSchedule")
    @ResponseWrapper(localName = "getAllCaretakersScheduleResponse", targetNamespace = "http://ws/", className = "ws.GetAllCaretakersScheduleResponse")
    @Action(input = "http://ws/CaretakerWS/getAllCaretakersScheduleRequest", output = "http://ws/CaretakerWS/getAllCaretakersScheduleResponse")
    public List<TimeReference> getAllCaretakersSchedule();

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "userExists", targetNamespace = "http://ws/", className = "ws.UserExists")
    @ResponseWrapper(localName = "userExistsResponse", targetNamespace = "http://ws/", className = "ws.UserExistsResponse")
    @Action(input = "http://ws/CaretakerWS/userExistsRequest", output = "http://ws/CaretakerWS/userExistsResponse")
    public boolean userExists(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password);

    /**
     * 
     * @param username
     * @return
     *     returns ws.Caretaker
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getCaretaker", targetNamespace = "http://ws/", className = "ws.GetCaretaker")
    @ResponseWrapper(localName = "getCaretakerResponse", targetNamespace = "http://ws/", className = "ws.GetCaretakerResponse")
    @Action(input = "http://ws/CaretakerWS/getCaretakerRequest", output = "http://ws/CaretakerWS/getCaretakerResponse")
    public Caretaker getCaretaker(
        @WebParam(name = "username", targetNamespace = "")
        String username);

    /**
     * 
     * @param firstName
     * @param lastName
     * @param password
     * @param email
     * @param username
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "addCaretaker", targetNamespace = "http://ws/", className = "ws.AddCaretaker")
    @Action(input = "http://ws/CaretakerWS/addCaretaker")
    public void addCaretaker(
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password);

}

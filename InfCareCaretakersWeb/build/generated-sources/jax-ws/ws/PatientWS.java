
package ws;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150120.1832
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PatientWS", targetNamespace = "http://ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PatientWS {


    /**
     * 
     * @param firstName
     * @param lastName
     * @param password
     * @param city
     * @param streetNo
     * @param street
     * @param email
     * @param username
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "addPatient", targetNamespace = "http://ws/", className = "ws.AddPatient")
    @Action(input = "http://ws/PatientWS/addPatient")
    public void addPatient(
        @WebParam(name = "firstName", targetNamespace = "")
        String firstName,
        @WebParam(name = "lastName", targetNamespace = "")
        String lastName,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "city", targetNamespace = "")
        String city,
        @WebParam(name = "street", targetNamespace = "")
        String street,
        @WebParam(name = "streetNo", targetNamespace = "")
        String streetNo);

    /**
     * 
     * @param type
     * @return
     *     returns ws.Need
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNeed", targetNamespace = "http://ws/", className = "ws.GetNeed")
    @ResponseWrapper(localName = "getNeedResponse", targetNamespace = "http://ws/", className = "ws.GetNeedResponse")
    @Action(input = "http://ws/PatientWS/getNeedRequest", output = "http://ws/PatientWS/getNeedResponse")
    public Need getNeed(
        @WebParam(name = "type", targetNamespace = "")
        String type);

    /**
     * 
     * @param timerefId
     * @param lastVisit
     * @param needType
     * @param minP
     * @param desc
     * @param maxP
     * @param username
     */
    @WebMethod
    @Oneway
    @RequestWrapper(localName = "setNeed", targetNamespace = "http://ws/", className = "ws.SetNeed")
    @Action(input = "http://ws/PatientWS/setNeed")
    public void setNeed(
        @WebParam(name = "desc", targetNamespace = "")
        String desc,
        @WebParam(name = "lastVisit", targetNamespace = "")
        String lastVisit,
        @WebParam(name = "minP", targetNamespace = "")
        int minP,
        @WebParam(name = "maxP", targetNamespace = "")
        int maxP,
        @WebParam(name = "needType", targetNamespace = "")
        String needType,
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "timerefId", targetNamespace = "")
        Long timerefId);

    /**
     * 
     * @param username
     * @return
     *     returns ws.Patient
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPatient", targetNamespace = "http://ws/", className = "ws.GetPatient")
    @ResponseWrapper(localName = "getPatientResponse", targetNamespace = "http://ws/", className = "ws.GetPatientResponse")
    @Action(input = "http://ws/PatientWS/getPatientRequest", output = "http://ws/PatientWS/getPatientResponse")
    public Patient getPatient(
        @WebParam(name = "username", targetNamespace = "")
        String username);

    /**
     * 
     * @return
     *     returns java.util.List<ws.Need>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllNeeds", targetNamespace = "http://ws/", className = "ws.GetAllNeeds")
    @ResponseWrapper(localName = "getAllNeedsResponse", targetNamespace = "http://ws/", className = "ws.GetAllNeedsResponse")
    @Action(input = "http://ws/PatientWS/getAllNeedsRequest", output = "http://ws/PatientWS/getAllNeedsResponse")
    public List<Need> getAllNeeds();

    /**
     * 
     * @return
     *     returns java.util.List<ws.TimeReference>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllPatientsSchedule", targetNamespace = "http://ws/", className = "ws.GetAllPatientsSchedule")
    @ResponseWrapper(localName = "getAllPatientsScheduleResponse", targetNamespace = "http://ws/", className = "ws.GetAllPatientsScheduleResponse")
    @Action(input = "http://ws/PatientWS/getAllPatientsScheduleRequest", output = "http://ws/PatientWS/getAllPatientsScheduleResponse")
    public List<TimeReference> getAllPatientsSchedule();

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "userExists", targetNamespace = "http://ws/", className = "ws.UserExists")
    @ResponseWrapper(localName = "userExistsResponse", targetNamespace = "http://ws/", className = "ws.UserExistsResponse")
    @Action(input = "http://ws/PatientWS/userExistsRequest", output = "http://ws/PatientWS/userExistsResponse")
    public boolean userExists(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password);

}
